{
    "task_id": "beta_mixture_component_inference",
    "kind": "numeric",
    "difficulty": 4,
    "paper_id": "stellar_obliquity",
    "description": "Implement a simplified version of the Bayesian inference for stellar obliquity distribution",
    "instructions": [
        "1. Set random seed to 42 for reproducibility using numpy.random.seed(42).",
        "2. Define the mixture parameters following \\ref{sec:hbm}: $w_0 = 0.3$, $w_1 = 0.7$, $\\mu_0 = 0.4$, $\\mu_1 = 0.98$, $\\kappa_0 = 4.0$, $\\kappa_1 = 15.0$.",
        "3. Convert the $\\mu$ and $\\kappa$ parameters to standard Beta distribution parameters using the relations from \\ref{sec:hbm}: $\\alpha = \\mu \\kappa$ and $\\beta = (1-\\mu) \\kappa$.",
        "4. Calculate $\\alpha_0 = \\mu_0 \\kappa_0 = 0.4 \\times 4.0 = 1.6$ and $\\beta_0 = (1-\\mu_0) \\kappa_0 = 0.6 \\times 4.0 = 2.4$.",
        "5. Calculate $\\alpha_1 = \\mu_1 \\kappa_1 = 0.98 \\times 15.0 = 14.7$ and $\\beta_1 = (1-\\mu_1) \\kappa_1 = 0.02 \\times 15.0 = 0.3$.",
        "6. Generate 200 samples from the mixture distribution using the formula: cos $\\psi = 2(w_0 u_0 + w_1 u_1) - 1$.",
        "7. For each sample, randomly choose component 0 with probability $w_0$ or component 1 with probability $w_1$.",
        "8. Generate $u_0$ samples from Beta($\\alpha_0$, $\\beta_0$) = Beta(1.6, 2.4) and $u_1$ samples from Beta($\\alpha_1$, $\\beta_1$) = Beta(14.7, 0.3).",
        "9. Apply the linear transformation to map from [0,1] to [-1,1]: cos $\\psi = 2(w_0 u_0 + w_1 u_1) - 1$.",
        "10. Implement maximum likelihood estimation (MLE) to recover the original parameters from the generated samples.",
        "11. Define the log-likelihood function for the two-component Beta mixture model in the cos $\\psi$ space.",
        "12. Use scipy.optimize.minimize or scipy.optimize.differential_evolution to find the MLE parameters.",
        "13. Set appropriate bounds for the optimization: weights in [0,1] with sum=1, $\\mu$ parameters in [0,1], and $\\kappa$ parameters > 0.",
        "14. Initialize the optimization with reasonable starting values close to the true parameters.",
        "15. Extract the inferred value of $w_1$ (the fraction of aligned systems) from the MLE results.",
        "16. Round the inferred $w_1$ value to 2 decimal places using numpy.round(w1_inferred, 2).",
        "17. Verify that the computation completes in less than 1 minute on a standard laptop.",
        "18. Return the inferred value of $w_1$ rounded to 2 decimal places as the final result."
    ],
    "expected_output": 0.7,
    "tolerance": 0.03,
    "parents": [],
    "output_justification": "This is a hypothetical task based on the mixture model described in Section 3. The expected output is the true value of w\u2081 used to generate the data, with reasonable tolerance for sampling variability and estimation accuracy."
}