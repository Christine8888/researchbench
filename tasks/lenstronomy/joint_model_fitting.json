{
    "task_id": "joint_model_fitting",
    "kind": "numeric",
    "difficulty": 8,
    "description": "Simulate HST-like imaging data of a lensed galaxy and perform a joint fit of the lens mass, lens light, and source light parameters using lenstronomy's fitting sequence.",
    "instructions": "1. Define the true model components:\n   - Lens Mass: Singular Isothermal Ellipsoid ('SIE') centered at (0,0), Einstein radius theta_E = 1.2 arcsec, ellipticity components e1=0, e2=0.176 (derived from axis ratio q=0.7, position angle phi=45 deg).\n   - Lens Light: Sersic profile ('SERSIC') centered at (0,0), effective radius R_sersic = 0.8 arcsec, Sersic index n_sersic = 4, magnitude = 18 (AB mag).\n   - Source Light: Sersic profile ('SERSIC') centered at (0.1, 0.05) arcsec, effective radius R_sersic = 0.2 arcsec, Sersic index n_sersic = 1, magnitude = 20 (AB mag).\n2. Define the simulation settings:\n   - Instrument/Observation: Pixel scale = 0.05 arcsec/pixel, image dimensions = 100x100 pixels. Assume a Gaussian PSF with FWHM = 0.1 arcsec. Exposure time = 1000 s, magnitude zero point = 25.\n   - Noise: Add Gaussian background noise with standard deviation sigma_bkgd = 0.05 counts/pixel. Also add Poisson noise based on the simulated counts per pixel, calculated using the exposure time and zero point (assume gain=1). Use the formula: noise_variance = sigma_bkgd^2 + image_counts / exposure_time.\n3. Simulate the image: Use `lenstronomy.ImSim.image_model.ImageModel` to generate the lensed image based on the true models and simulation settings. Include PSF convolution and noise addition.\n4. Define the fitting setup:\n   - Models: Use the same model types (SIE for mass, SERSIC for lens light, SERSIC for source light) as in the simulation.\n   - Parameters to Fit: Fit for lens mass (theta_E, e1, e2), lens light (amplitude, R_sersic), and source light (amplitude, R_sersic, center_x, center_y). Keep lens mass and light centers fixed at (0,0). Keep Sersic indices fixed at their true values (n_sersic=4 for lens, n_sersic=1 for source).\n   - Fitting Algorithm: Use `lenstronomy.Workflow.fitting_sequence.FittingSequence`. Perform Particle Swarm Optimization (PSO) using `lenstronomy.Sampling.sampler.particle_swarm`. Set reasonable parameter bounds around the true values (e.g., +/- 20% for theta_E, R_sersic; +/- 0.1 for e1, e2, center_x, center_y).\n   - Likelihood: Use the standard likelihood definition from lenstronomy (Eqn 1 in the paper), considering the noise model defined in step 2.\n5. Run the fitting sequence: Execute the PSO to find the best-fit parameters for the specified models.\n6. Extract the best-fit Einstein radius (theta_E_fit).\n7. Calculate the fractional error: Compute `abs(1.2 - theta_E_fit) / 1.2`.\n8. Report the calculated fractional error.",
    "expected_output": 0.03,
    "tolerance": 0.02,
    "parents": [
        "einstein_radius_estimation",
        "shapelet_source_reconstruction"
    ],
    "paper_id": "lenstronomy"
}