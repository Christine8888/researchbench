{
    "task_id": "shapelet_source_reconstruction",
    "paper_id": "lenstronomy",
    "kind": "numeric",
    "difficulty": 6,
    "description": "Reconstruct a simulated complex source using Shapelets basis functions and calculate the Normalized Mean Squared Error (NMSE).",
    "instructions": "Using the `lenstronomy` Python package, perform the following steps:\n1. Define the lens model: Singular Isothermal Ellipsoid (SIE) with Einstein radius `theta_E` = 1.0 arcsec, axis ratio `q` = 0.8, position angle `phi` = 0 degrees, center `center_x` = 0, `center_y` = 0 arcsec. Instantiate `lenstronomy.LensModel.lens_model.LensModel`.\n2. Define the true source light model list using `lenstronomy.LightModel.light_model.LightModel`:\n   - Component 1: Sersic ellipse (SERSIC_ELLIPSE) with Sersic index `n_sersic` = 4, effective radius `R_sersic` = 0.2 arcsec, amplitude `amp` = 1 (arbitrary), center `center_x` = 0, `center_y` = 0 arcsec, axis ratio `q`=1, angle `phi`=0.\n   - Component 2: Sersic ellipse (SERSIC_ELLIPSE) with Sersic index `n_sersic` = 1, effective radius `R_sersic` = 0.1 arcsec, amplitude `amp` = 1 (arbitrary), center `center_x` = 0.3, `center_y` = 0 arcsec, axis ratio `q`=1, angle `phi`=0.\n3. Define image simulation settings: Create a pixel grid (e.g., 100x100 pixels with a scale of 0.05 arcsec/pixel). Use `lenstronomy.SimulationAPI.sim_api.SimAPI` to set up the simulation.\n4. Generate a noiseless lensed image: Use `SimAPI.image()` method with the lens model, true source model, and simulation settings. No PSF convolution or noise is needed.\n5. Define the source reconstruction model: Use `lenstronomy.LightModel.light_model.LightModel` with a single 'SHAPELETS' profile. Set the maximum polynomial order `n_max` = 10. Choose appropriate shapelet scale `beta` (e.g., 0.1 arcsec) and center `center_x`=0, `center_y`=0.\n6. Set up the image model for reconstruction: Use `lenstronomy.ImSim.image_model.ImageModel` with the same pixel grid, the known lens model, and the shapelet source model.\n7. Perform linear inversion: Use `ImageModel.image_linear_solve()` method, providing the noiseless lensed image (from step 4) as data. This finds the best-fit shapelet coefficients.\n8. Reconstruct the source surface brightness: Evaluate the fitted shapelet model (`LightModel` instance from step 5 with fitted coefficients) on a source plane grid using `LightModel.surface_brightness()`.\n9. Evaluate the true source surface brightness: Evaluate the true source model (from step 2) on the same source plane grid using `LightModel.surface_brightness()`.\n10. Calculate the Mean Squared Error (MSE): `MSE = mean((true_source_map - reconstructed_source_map)**2)` over the source plane grid points.\n11. Calculate the variance of the true source: `Var = variance(true_source_map)` over the source plane grid points.\n12. Calculate the Normalized Mean Squared Error (NMSE): `NMSE = MSE / Var`.\n13. Report the calculated NMSE.",
    "expected_output": 0.05,
    "tolerance": 0.03,
    "parents": [
        "einstein_radius_estimation"
    ]
}